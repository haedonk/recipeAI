plugins {
        id 'java'
        id 'groovy'
        id 'org.springframework.boot' version '3.4.3'
        id 'io.spring.dependency-management' version '1.1.7'
        id 'jacoco'
}

group = 'com.recipe'
version = '0.0.2'

java {
        toolchain {
                languageVersion = JavaLanguageVersion.of(17)
        }
}

repositories {
        mavenCentral()
}

// JaCoCo configuration
jacoco {
    toolVersion = "0.8.10"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    executionData fileTree(dir: project.buildDir, include: '**/jacoco/*.exec')

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                // Exclude configuration classes
                '**/config/**',
                '**/configuration/**',
                // Exclude auto-generated classes
                '**/Application.class',
                    '**/OpenAiController.class',
                '**/RecipeAppApplication.class',
                // Exclude DTOs and POJOs (optional)
                '**/model/**',
                '**/entity/**',
                // Exclude exception classes (optional)
                '**/exception/**'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = 0.50 // 50% minimum coverage
            }
        }
    }
}

// Make check task depend on coverage verification
check.dependsOn jacocoTestCoverageVerification

// Ensure test report is generated after tests
test.finalizedBy jacocoTestReport

dependencies {
        // Spring Boot
        implementation 'org.springframework.boot:spring-boot-starter-web'          // MVC server
        implementation 'org.springframework.boot:spring-boot-starter-web'      // keep Tomcat MVC
        implementation 'org.springframework.boot:spring-boot-starter-webflux'  // for WebClient + Reactor Netty
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-mail'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-validation'   // replaces explicit validator deps

        // JWT
        implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
        runtimeOnly   'io.jsonwebtoken:jjwt-impl:0.12.3'
        runtimeOnly   'io.jsonwebtoken:jjwt-jackson:0.12.3'

        // Database
        implementation 'org.postgresql:postgresql' // version managed by Boot

        // Lombok
        compileOnly 'org.projectlombok:lombok:1.18.28'
        annotationProcessor 'org.projectlombok:lombok:1.18.28'

        // MapStruct
        implementation 'org.mapstruct:mapstruct:1.5.5.Final'
        annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

        // Grafana Loki Logback appender
        implementation 'com.github.loki4j:loki-logback-appender:1.5.1'

        // OpenAI
        implementation 'com.openai:openai-java-spring-boot-starter:3.4.1'

        // Dev
        developmentOnly 'org.springframework.boot:spring-boot-devtools'

        // Testing
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
                exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
        testImplementation 'org.springframework.security:spring-security-test'
        testImplementation 'org.spockframework:spock-core:2.3-groovy-4.0'
        testImplementation 'org.spockframework:spock-spring:2.3-groovy-4.0'
        testImplementation 'org.apache.groovy:groovy-json:4.0.21'
        testImplementation 'org.testcontainers:junit-jupiter:1.21.3'
        testImplementation 'org.testcontainers:postgresql:1.21.3'
        testImplementation 'org.assertj:assertj-core:3.26.3'
        testImplementation 'org.wiremock:wiremock-standalone:3.9.0'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


configurations.configureEach {
        resolutionStrategy {
                force 'com.github.loki4j:loki-logback-appender:1.5.1'
                force 'org.apache.commons:commons-compress:1.26.0'
                force 'org.apache.commons:commons-lang3:3.18.0'
        }
}

tasks.withType(Test).configureEach {
        useJUnitPlatform()
}